#infrastructure as code, setup AWS lambda for computation, DynamoDB for database storage, CloudWatch for logging, IAM for access management

service: uwo-eats-server #server name

frameworkVersion: '3'

#AWS provider, development stage
provider:
  name: aws
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-east-1"}
  runtime: java11
  timeout: 20 # By default, the timeout is 6 seconds, which is too short for cold start
  httpApi:
    cors: true #client server access manage, permit dynamodb actions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:BatchGetItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

#upload jar file onto server to run
package:
  artifact: build/libs/${self:service}-${self:provider.stage}-all.jar

#lambda functions
functions:
  store-get: #get /store/1 page content (category, item id, name, price)
    handler: uwoEats.api.storeGet.Handler
    events:
      - httpApi: #lambda helps to handle http request send to handler.kt     
          path: /store/{storeId}
          method: get

  order-get: #get order page content (restaurant id, order id)
    handler: uwoEats.api.orderGet.Handler
    events:
      - httpApi:
          path: /order/{storeId}/{orderId}
          method: get

  order-post: #upload new order request
    handler: uwoEats.api.orderPost.Handler
    events:
      - httpApi:
          path: /order/{storeId}
          method: post

resources:
  extensions:
    # Accelerate cold start with SnapStart
    # https://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart/
    StoreDashgetLambdaFunction:
      Properties:
        SnapStart:
          ApplyOn: PublishedVersions
    OrderDashgetLambdaFunction:
      Properties:
        SnapStart:
          ApplyOn: PublishedVersions
    OrderDashpostLambdaFunction:
      Properties:
        SnapStart:
          ApplyOn: PublishedVersions
    
  #dynamodb table (store table, order table)
  Resources:
    StoreTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-store
        AttributeDefinitions: 
          - AttributeName: storeId
            AttributeType: N
        KeySchema: #storeId(key)
          - AttributeName: storeId
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-order
        AttributeDefinitions:
          - AttributeName: storeId
            AttributeType: N
          - AttributeName: orderId
            AttributeType: S
        KeySchema: #storeID(hash key for partitioning, distriubte msg onto dynamodb machine), orderId(range key for sequencing on particular machine)
          - AttributeName: storeId
            KeyType: HASH
          - AttributeName: orderId
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
